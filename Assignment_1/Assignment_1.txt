1.1 [15 8 7 12] 

1.2 [3 4 5]

1.3 [1 5 4 3 2]

1.4 
	int *createArray(int n){
    		int* arr = new int(n);
    		for(int i = 0;i<n;i++){
    		    arr[i] = i+1;
   		 }
    		return arr;
       }

1.5 g r a m a r

1.6.1 		 *
		    +        -
        	3    6   5   7

1.6.2  '3' -> '6' -> '+' -> '5' -> '7' -> '-'  -> '*'

1.6.3  '3' -> '+' -> '6' -> '*' ->' 5' -> '-' -> '7'

1.7 2 3 4 6 9 10

1.8 1   ichi
	2   ni

2.a
 	bool find(const list<student>& roster, const float g){
       		std::list<student>::const_iterator it = roster.begin();
      		 while(it != roster.end()){
       			if((*it).grade >= g)return true;
     			it++;
    		}
       		return false;
	}

2.b //Binary search to find the position for insertion
void insert_sorted(list<student>& roster, student &stu){
    int mid, low = 0, high = roster.size() - 1;
    std::list<student>::iterator it = roster.begin(),
                                 lowBound = roster.begin(),
                                 upBound = --roster.end();

    while(!(high - low <= 1)){
        mid = (high+low) / 2;
        it = roster.begin();
        std::advance(it, mid);

        if(stu.grade<(*it).grade){
            low = mid + 1;
            it = lowBound;
            lowBound = roster.begin();
            std::advance(lowBound, low);

            if(stu.grade>=(*lowBound).grade){   //If the grade is greater than or equal to the lower bound it is inserted at it
                roster.insert(lowBound, stu);
                return;
            }
        }

        else if(stu.grade>(*it).grade){
            high = mid - 1;
            it = lowBound;
            upBound = roster.begin();
            std::advance(upBound, high);

            if(stu.grade<=(*upBound).grade){  //If the grade is less than or equal the upper bound it is inserted after it
                roster.insert(++upBound, stu);
                return;
            }
        }

        else{   //This the case where the grade being searched is equal to the grade of the iterator's current position
             roster.insert(it, stu);
             return;
        }
    }

    //If the grade is greater than or equal to the lower bound it is inserted at it
    if(stu.grade>=(*lowBound).grade)
        roster.insert(lowBound, stu);

    //If the value is lesser than or equal the upper bound it is inserted after it
    else if(stu.grade<=(*upBound).grade)
        roster.insert(++upBound, stu);

    //The value is between the lower bound and upper bound, it is inserted inbetween the two
    else
        roster.insert(++lowBound, stu);

    return;
}

2.c 
	pair<float,float> low_high(const list<student>& roster){
	pair<float, float> p;
	p.first = (--roster.end())->grade;
        p.second = roster.begin()->grade;
        return p;
}

2.d 
	pair<float,float> low_high_unsorted(const list<student>& roster){
      		 std::list<student>::const_iterator it = roster.begin();
       		float lowest, highest;
     		lowest = highest = it->grade;
    		it++;
   		while(it != roster.end()){
       			if(it->grade > highest) highest = it->grade;
        		else if(it->grade < lowest) lowest = it->grade;
        		it++;
    		}
   		pair<float, float> p;
    		p.first = lowest;
    		p.second = highest;
    		return p;
	}

3.a
	template <typename T>
		int occurs(tnode<T> *root, const T &elem){
			if (! root )	return 0; 
		}
		
		if(*root == T&elem){
			return 1 + occurs(root->left, elem) + occurs(root->right, elem);
		
		else return occurs(root->left, elem) + occurs (root->right, elem)
	}
3.b
	template <typename T>
	bool equals(tnode<T> *root1, tnode<T> *root2){
		if(*root1 != *root2)
			return false;

		return equals(root1->left, root2->left) && equals(root1->right, root2->right);
	}
3.c
	template <typename T>
	bool search_tree(tnode<T> *root){
		if(!root->left && !root->right) return true;
		
		if(!(*root >= *root->left && *root <= root->right)) return false;

		else return search_tree(root->left) && search_tree(root->right);
	}